@page "/identity/account/login"
@layout AuthenticationLayout

<div class="container">
    <div class="row">
        <div class="col-lg-12"></div>
        <div class="col-lg-4">
            <EditForm Enhance Model="User" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator /> 
                <div class="card bg-dark" style="opacity:0.5; margin-top: 50%; border-radius: 10px; color:white; font-weight:bold">

                    <div class="card-header text-center fs-5 mb-2"> Login</div>

                    <div class="container">
                        <div class="row">
                            <div class="col-lg-4 col-md-4 col-sm-4"></div>
                            <div class="col-lg-4 col-md-4 col-sm-4 d-flex justify-content-center">
                                <img style="border-radius: 20px;" src="../images/logo/500x500Mylogo01.png" height="70" width="70" />
                            </div>
                            <div class="col-lg-4 col-md-4 col-sm-4"></div>
                        </div>
                    </div>

                    <div class="card-body">
                        <div class="form-group mt-3">
                            <label class="form-label">Email</label>
                            <InputText @bind-Value="User.Email" class="form-control"></InputText>
                        </div>
                        <div class="form-group mt-3">
                            <label class="form-label">Password</label>
                            <input type="password" @bind="User.Password" class="form-control"></input>
                        </div>
                        <div class="form-group mt-3">
                             @if (ShowLoadingButton)
                            {
                                <ButtonLoadingSpinner></ButtonLoadingSpinner>
                            }else
                            {
                            <button class="btn btn-outline-primary float-end" type="submit">Login</button>  
                            }
                        </div>
                    </div>
                    <div class="card-footer">
                        <span class="text-center">
                            Don't have account ?
                            <a class="btn-link" href="identity/account/register">Sign Up</a>
                        </span>
                        <ValidationSummary />   
                    </div>
                </div>
            </EditForm>
        </div>
        <div class="col-lg-4"></div>
    </div>
</div>

@code {
    public bool ShowLoadingButton { get; set; } = false;
    Login User = new();

    [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; }
   
    protected async override Task OnInitializedAsync()
    {
        await CheckUserAuthentication();
    }

    async Task HandleLogin()
    {
        ShowLoadingButton = true;
        var result = await accountService.SignInAsync(User);
        if (result.flag)
        {
            await DisplayDialog(result.Message, "Login Sucess");
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession() 
            { Token = result.Token, RefreshToken = result.RefreshToken });
            NavManager.NavigateTo("/", forceLoad: true);
        } 
        else
        {
            await DisplayDialog(result.Message, "Alert!");
        }

        ShowLoadingButton = false;
    }

    private async Task DisplayDialog(string content, string tittle)
    {
        await dialogService.AlertAsync(content, tittle);  
    }

    private async Task CheckUserAuthentication()
    {
        //O erro ocorre porque user.Identity ou AuthenticationState 
        // estão nulos em algum momento,
        // gerando a NullReferenceException.\

       /* var user = (await AuthenticationState).User;
        bool isUserAuthenticated = user.Identity!.IsAuthenticated;
        if (isUserAuthenticated)
            NavManager.NavigateTo("/home/dashboard");*/

        var authState = await AuthenticationState;
        var user = authState?.User;

        if (user?.Identity?.IsAuthenticated == true)
        {
            NavManager.NavigateTo("/home/dashboard");
        }
    }
}
 